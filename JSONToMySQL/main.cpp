/*
JSONToMySQL.

Copyright (C) 2015-2017 International Livestock Research Institute.
Author: Carlos Quiros (cquiros_at_qlands.com / c.f.quiros_at_cgiar.org)

JSONToMySQL is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

JSONToMySQL is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with JSONToMySQL.  If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
*/

#include <QCoreApplication>
#include <tclap/CmdLine.h>
#include "mainclass.h"
#include <QDebug>


int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);

    QString title;
    title = title + "********************************************************************* \n";
    title = title + " * JSON to MySQL                                                     * \n";
    title = title + " * This tool imports JSON data from FormHub into MySQL.              * \n";
    title = title + " * The JSON input files are generated from 'mongotojson'.            * \n";
    title = title + " * The tool uses the import manifest file generated by 'odktomysql'  * \n";
    title = title + " * to import the JSON data into the neccesary MySQL tables.          * \n";
    title = title + " ********************************************************************* \n";

    TCLAP::CmdLine cmd(title.toUtf8().constData(), ' ', "1.1");

    TCLAP::ValueArg<std::string> jsonArg("j","json","Input JSON File",true,"","string");
    TCLAP::ValueArg<std::string> manifestArg("m","manifest","Input manifest XML file",true,"","string");
    TCLAP::ValueArg<std::string> hostArg("H","host","MySQL Host. Default: localhost",false,"localhost","string");
    TCLAP::ValueArg<std::string> portArg("P","port","MySQL port. Default: 3306",false,"3306","string");
    TCLAP::ValueArg<std::string> userArg("u","user","MySQL User",true,"","string");
    TCLAP::ValueArg<std::string> passArg("p","password","MySQL Password",true,"","string");
    TCLAP::ValueArg<std::string> schemaArg("s","schema","MySQL Schema",true,"","string");
    TCLAP::ValueArg<std::string> outputArg("o","output","Output Log file",false,"./output.csv","string");
    TCLAP::ValueArg<std::string> inputArg("i","imported","Imported file. Store the files names properly imported. Also used to skip repeated files",false,"./imported.log","string");
    TCLAP::ValueArg<std::string> JSArg("J","javascript","Custom Before Insert JavaScript",false,"","string");
    TCLAP::SwitchArg overwriteSwitch("w","overwrite","Overwrite the log file", cmd, false);
    TCLAP::SwitchArg oputSQLSwitch("S","outputSQL","Output each insert SQL to ./inputfile.json.sql", cmd, false);
    TCLAP::ValueArg<std::string> mapDirArg("M","mapoutputdir","Map output directory",false,"./recordMaps","string");
    TCLAP::ValueArg<std::string> outTypeArg("O","outputtype","OutputType: (h)uman readable or (m)achine readble",false,"m","string");

    //These two parameters should be removed once the external script code works

    //TCLAP::SwitchArg ignoreSwitch("g","ignore","Ignore insert in main table", cmd, false);
    //TCLAP::SwitchArg extractSwitch("e","extract","Extract number from primary key", cmd, false);

    cmd.add(jsonArg);
    cmd.add(manifestArg);
    cmd.add(hostArg);
    cmd.add(portArg);
    cmd.add(userArg);
    cmd.add(passArg);
    cmd.add(schemaArg);
    cmd.add(outputArg);
    cmd.add(inputArg);
    cmd.add(mapDirArg);
    cmd.add(outTypeArg);
    cmd.add(JSArg);

    //Parsing the command lines
    cmd.parse( argc, argv );


    //Getting the variables from the command
    bool overwrite = overwriteSwitch.getValue();
    QString json = QString::fromUtf8(jsonArg.getValue().c_str());
    QString manifest = QString::fromUtf8(manifestArg.getValue().c_str());
    QString host = QString::fromUtf8(hostArg.getValue().c_str());
    QString port = QString::fromUtf8(portArg.getValue().c_str());
    QString user = QString::fromUtf8(userArg.getValue().c_str());
    QString password = QString::fromUtf8(passArg.getValue().c_str());
    QString schema = QString::fromUtf8(schemaArg.getValue().c_str());
    QString output = QString::fromUtf8(outputArg.getValue().c_str());
    QString input = QString::fromUtf8(inputArg.getValue().c_str());
    QString javaScript = QString::fromUtf8(JSArg.getValue().c_str());
    QString mapDirectory = QString::fromUtf8(mapDirArg.getValue().c_str());
    QString outputType = QString::fromUtf8(outTypeArg.getValue().c_str());

    mainClass *task = new mainClass(&app);

    task->setParameters(overwrite,json,manifest,host,port,user,password,schema,output,input,javaScript,oputSQLSwitch.getValue(),mapDirectory,outputType);

    QObject::connect(task, SIGNAL(finished()), &app, SLOT(quit()));

    QTimer::singleShot(0, task, SLOT(run()));

    app.exec();
    return task->returnCode;

}
